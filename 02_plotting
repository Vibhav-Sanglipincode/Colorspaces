# Install & load required packages
install.packages(c("imager", "colorspace", "pavo"))
library(imager)
library(colorspace)
library(pavo)
library(grDevices)

# Load image
img <- load.image("C:/Users/vibha/Documents/Jungle owlet/Jungle owlet/Standadised_Jungle Owlet_Dec'24-20250520T050219Z-1-001/Standadised_Jungle Owlet_Dec_24/IMG_1646.jpg")

# Convert to HSV
img_hsv <- RGBtoHSV(img)

# Plot image for manual ROI selection
plot(img)
roi <- grabRect(img)
print(roi)

# Manually set the selected rectangle (modify if needed)
x_min <- 2057     
x_max <- 3883     
y_min <- 1299     
y_max <- 2223     

# Crop region from HSV
roi_hsv <- img_hsv[y_min:y_max, x_min:x_max, , drop = FALSE]
dim(roi_hsv)

# Extract HSV channels
hue_values <- roi_hsv[,,1]
chroma_values <- roi_hsv[,,2]
value_values <- roi_hsv[,,3]

# Compute mean HSV
mean_hue <- mean(hue_values, na.rm = TRUE) * 360  # Hue in degrees
mean_chroma <- mean(chroma_values, na.rm = TRUE)
mean_value <- mean(value_values, na.rm = TRUE)

print(c(mean_hue, mean_chroma, mean_value))

# Convert HSV to RGB (helper function)
hcv_to_rgb <- function(h, c, v) {
  h_prime <- h / 60
  x <- c * (1 - abs((h_prime %% 2) - 1))
  m <- v - c
  
  if (h_prime >= 0 && h_prime < 1) {
    r <- c; g <- x; b <- 0
  } else if (h_prime < 2) {
    r <- x; g <- c; b <- 0
  } else if (h_prime < 3) {
    r <- 0; g <- c; b <- x
  } else if (h_prime < 4) {
    r <- 0; g <- x; b <- c
  } else if (h_prime < 5) {
    r <- x; g <- 0; b <- c
  } else {
    r <- c; g <- 0; b <- x
  }
  
  r <- (r + m) * 255
  g <- (g + m) * 255
  b <- (b + m) * 255
  
  return(c(round(r), round(g), round(b)))
}

# Use mean HSV to generate RGB
rgb_values <- hcv_to_rgb(mean_hue, mean_chroma, mean_value)
print(rgb_values)

# Normalize to 0–1 for spectrum simulation
rgb_vals <- rgb_values / 255

# Simulate reflectance spectrum
wavelengths <- seq(300, 700, length.out = 101)
red_curve <- dnorm(wavelengths, mean = 620, sd = 50) * rgb_vals[1]
green_curve <- dnorm(wavelengths, mean = 540, sd = 50) * rgb_vals[2]
blue_curve <- dnorm(wavelengths, mean = 450, sd = 50) * rgb_vals[3]
reflectance <- red_curve + green_curve + blue_curve

# Create pavo spectrum
spec_data <- as.rspec(data.frame(wl = wavelengths, refl = reflectance))

# Restrict to visible only
library(dplyr)

spec_vis <- spec_data %>%
  filter(wl >= 400 & wl <= 700)

# Plot pseudo-spectrum
plot(spec_vis)

# Avian visual model (VS — no UV)
# Use the full reflectance spectrum
# (assuming `spec_data` already spans 300–700 nm)
vismod_vis <- vismodel(spec_data, visual = "avg.v")

# Continue as usual
tcs_vis <- colspace(vismod_vis, space = "tcs")
plot(tcs_vis)


# Extract quantum catches
s <- vismod_vis$s
m <- vismod_vis$m
l <- vismod_vis$l

# Convert to spherical coordinates (no u channel here)
#r <- sqrt(s^2 + m^2 + l^2)
#theta <- atan2(m, s) * (180 / pi)
#phi <- acos(l / r) * (180 / pi)

#print(c(r, theta, phi))

# Convert to tetrahedral color space (TCS, VS model)
tcs_vis <- colspace(vismod_vis, space = "tcs")
print(tcs_vis)

# Plot TCS
png("tcs_plot_vs_only.png", width = 800, height = 800)
plot(tcs_vis, col = "blue", pch = 20, main = "TCS (Visible Spectrum, VS Vision)")
dev.off()
